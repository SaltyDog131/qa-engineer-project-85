---
functional:
  - Пользователь может создать игру, выбрав язык программирования.
  - Пользователь может присоединиться к уже созданной открытой игре.
  - Пользователь может пригласить другого игрока по ссылке.
  - Во время игры отображается код соперника в реальном времени.
  - Пользователь видит результаты запуска тестов своей и чужой программы.
  - В процессе игры доступен чат для общения с соперником и зрителями.
  - Пользователь может наблюдать за игрой в роли зрителя.
  - Пользователь может использовать расширение для Chrome для отслеживания игр.

non-functional:
  - Поддерживаются языки программирования: JavaScript, PHP, Python, Ruby.
  - Интерфейс фронтенда реализован как одностраничное приложение (SPA) с использованием React и Redux.
  - Бэкенд реализован на языке Elixir с использованием фреймворка Phoenix.
  - Тесты к задачам автоматически преобразуются на все поддерживаемые языки с помощью библиотеки multicode.
  - Приложение разворачивается в контейнерах Docker, настройка среды — через Ansible.

implicit:
  - Игра должна быть доступна для пользователей с разным уровнем подготовки.
  - Интерфейс должен быть понятен без необходимости изучать документацию.
  - Система должна обрабатывать ошибки и исключения без сбоев.
  - Все участники игры (игроки и зрители) должны видеть актуальное состояние в реальном времени.
  - Расширение Chrome должно быть безопасным и соответствовать требованиям магазина расширений.
